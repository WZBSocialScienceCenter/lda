#
# build configuration for appveyor.com
#

#
# OS versions to build on
#

image:
#  - Visual Studio 2019
#  - macOS
#  - macOS-Mojave
  - Ubuntu
#  - Ubuntu2004

#
# Python versions to build on
#

environment:
  matrix:

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON_VERSION: "3.6.x"
      PYTHON_WIN: "C:\\Python36"
      PYTHON_ARCH: "32"

    - PYTHON_VERSION: "3.6.x"
      PYTHON_WIN: "C:\\Python36-x64"
      PYTHON_UNIX: "venv3.6"
      PYTHON_ARCH: "64"

    - PYTHON_VERSION: "3.7.x"
      PYTHON_WIN: "C:\\Python37"
      PYTHON_ARCH: "32"

    - PYTHON_VERSION: "3.7.x"
      PYTHON_WIN: "C:\\Python37-x64"
      PYTHON_UNIX: "venv3.7"
      PYTHON_ARCH: "64"

    - PYTHON_VERSION: "3.8.x"
      PYTHON_WIN: "C:\\Python38"
      PYTHON_ARCH: "32"

    - PYTHON_VERSION: "3.8.x"
      PYTHON_WIN: "C:\\Python38-x64"
      PYTHON_UNIX: "venv3.8"
      PYTHON_ARCH: "64"

matrix:
  exclude:
    - image: macOS
      PYTHON_ARCH: "32"    # 32bit only for Windows
    - image: macOS-Mojave
      PYTHON_ARCH: "32"    # 32bit only for Windows
    - image: Ubuntu
      PYTHON_ARCH: "32"    # 32bit only for Windows
    - image: Ubuntu2004
      PYTHON_ARCH: "32"    # 32bit only for Windows

#
# Windows-specific build steps
#

for:
-
  matrix:
    only:
      - image: Visual Studio 2019

  install:
    # Prepend newly installed Python to the PATH of this build (this cannot be
    # done from inside the powershell script as it would require to restart
    # the parent CMD process).
    - "SET PATH=%PYTHON_WIN%;%PYTHON_WIN%\\Scripts;%PATH%"

    # Check that we have the expected version and architecture for Python
    - "python --version"
    - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

    # Install the build dependencies of the project. If some dependencies contain
    # compiled extensions and are not provided as pre-built wheel packages,
    # pip will build them from source using the MSVC compiler matching the
    # target Python version and architecture
    - "%CMD_IN_ENV% pip install wheel"
    - "%CMD_IN_ENV% pip install -r requirements.txt"
    - "%CMD_IN_ENV% pip install -r test-requirements.txt"
    - "%CMD_IN_ENV% cython lda/_lda.pyx"
    # build the wheel and install it
    - "%CMD_IN_ENV% python setup.py bdist_wheel bdist_wininst"
    - ps: "ls dist"

    # Install the generated wheel package to test it
    - "pip install --pre --no-index --find-links dist/ lda"


#
# MacOS-specific build steps
#

-
  matrix:
    only:
      - image: macOS
      - image: macOS-Mojave
      - image: Ubuntu
      - image: Ubuntu2004

  install:
    - "echo $HOME"
    - "source $HOME/$PYTHON_UNIX/bin/activate"
    # Check that we have the expected version and architecture for Python
    - "python --version"
    - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
    - "pip install wheel"
    - "pip install -r requirements.txt"
    - "pip install -r test-requirements.txt"
    - "make cython"
    - "python setup.py bdist_wheel"
    - "ls dist"

    # Install the generated wheel package to test it
    - "pip install --pre --no-index --find-links dist/ lda"


build: false  # building occurs during install above

#
# testing steps
#

test_script:
  # Change to a non-source folder to make sure we run the tests on the
  # installed library.
  - "mkdir empty_folder"
  - "cd empty_folder"
  - "python -m unittest discover lda"
  # Move back to the project folder
  - "cd .."

#
# generated downloadable wheels
#

artifacts:
  - path: 'dist\*.whl'
